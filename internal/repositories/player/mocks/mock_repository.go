// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/ronnied/internal/repositories/player (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_repository.go github.com/KirkDiggler/ronnied/internal/repositories/player Repository
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/KirkDiggler/ronnied/internal/models"
	player "github.com/KirkDiggler/ronnied/internal/repositories/player"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetPlayer mocks base method.
func (m *MockRepository) GetPlayer(arg0 context.Context, arg1 *player.GetPlayerInput) (*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", arg0, arg1)
	ret0, _ := ret[0].(*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockRepositoryMockRecorder) GetPlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockRepository)(nil).GetPlayer), arg0, arg1)
}

// GetPlayersInGame mocks base method.
func (m *MockRepository) GetPlayersInGame(arg0 context.Context, arg1 *player.GetPlayersInGameInput) (*player.GetPlayersInGameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayersInGame", arg0, arg1)
	ret0, _ := ret[0].(*player.GetPlayersInGameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayersInGame indicates an expected call of GetPlayersInGame.
func (mr *MockRepositoryMockRecorder) GetPlayersInGame(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayersInGame", reflect.TypeOf((*MockRepository)(nil).GetPlayersInGame), arg0, arg1)
}

// SavePlayer mocks base method.
func (m *MockRepository) SavePlayer(arg0 context.Context, arg1 *player.SavePlayerInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePlayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePlayer indicates an expected call of SavePlayer.
func (mr *MockRepositoryMockRecorder) SavePlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePlayer", reflect.TypeOf((*MockRepository)(nil).SavePlayer), arg0, arg1)
}

// UpdatePlayerGame mocks base method.
func (m *MockRepository) UpdatePlayerGame(arg0 context.Context, arg1 *player.UpdatePlayerGameInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayerGame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayerGame indicates an expected call of UpdatePlayerGame.
func (mr *MockRepositoryMockRecorder) UpdatePlayerGame(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayerGame", reflect.TypeOf((*MockRepository)(nil).UpdatePlayerGame), arg0, arg1)
}
