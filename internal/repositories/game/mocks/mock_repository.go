// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/ronnied/internal/repositories/game (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_repository.go github.com/KirkDiggler/ronnied/internal/repositories/game Repository
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/KirkDiggler/ronnied/internal/models"
	game "github.com/KirkDiggler/ronnied/internal/repositories/game"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteGame mocks base method.
func (m *MockRepository) DeleteGame(arg0 context.Context, arg1 *game.DeleteGameInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGame indicates an expected call of DeleteGame.
func (mr *MockRepositoryMockRecorder) DeleteGame(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGame", reflect.TypeOf((*MockRepository)(nil).DeleteGame), arg0, arg1)
}

// GetActiveGames mocks base method.
func (m *MockRepository) GetActiveGames(arg0 context.Context, arg1 *game.GetActiveGamesInput) (*game.GetActiveGamesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveGames", arg0, arg1)
	ret0, _ := ret[0].(*game.GetActiveGamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveGames indicates an expected call of GetActiveGames.
func (mr *MockRepositoryMockRecorder) GetActiveGames(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveGames", reflect.TypeOf((*MockRepository)(nil).GetActiveGames), arg0, arg1)
}

// GetGame mocks base method.
func (m *MockRepository) GetGame(arg0 context.Context, arg1 *game.GetGameInput) (*models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", arg0, arg1)
	ret0, _ := ret[0].(*models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame.
func (mr *MockRepositoryMockRecorder) GetGame(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockRepository)(nil).GetGame), arg0, arg1)
}

// GetGameByChannel mocks base method.
func (m *MockRepository) GetGameByChannel(arg0 context.Context, arg1 *game.GetGameByChannelInput) (*models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameByChannel", arg0, arg1)
	ret0, _ := ret[0].(*models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameByChannel indicates an expected call of GetGameByChannel.
func (mr *MockRepositoryMockRecorder) GetGameByChannel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameByChannel", reflect.TypeOf((*MockRepository)(nil).GetGameByChannel), arg0, arg1)
}

// GetGamesByParent mocks base method.
func (m *MockRepository) GetGamesByParent(arg0 context.Context, arg1 *game.GetGamesByParentInput) ([]*models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGamesByParent", arg0, arg1)
	ret0, _ := ret[0].([]*models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGamesByParent indicates an expected call of GetGamesByParent.
func (mr *MockRepositoryMockRecorder) GetGamesByParent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGamesByParent", reflect.TypeOf((*MockRepository)(nil).GetGamesByParent), arg0, arg1)
}

// SaveGame mocks base method.
func (m *MockRepository) SaveGame(arg0 context.Context, arg1 *game.SaveGameInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGame indicates an expected call of SaveGame.
func (mr *MockRepositoryMockRecorder) SaveGame(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGame", reflect.TypeOf((*MockRepository)(nil).SaveGame), arg0, arg1)
}
