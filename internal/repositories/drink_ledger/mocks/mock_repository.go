// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/ronnied/internal/repositories/drink_ledger (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_repository.go github.com/KirkDiggler/ronnied/internal/repositories/drink_ledger Repository
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	drink_ledger "github.com/KirkDiggler/ronnied/internal/repositories/drink_ledger"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddDrinkRecord mocks base method.
func (m *MockRepository) AddDrinkRecord(arg0 context.Context, arg1 *drink_ledger.AddDrinkRecordInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDrinkRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDrinkRecord indicates an expected call of AddDrinkRecord.
func (mr *MockRepositoryMockRecorder) AddDrinkRecord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDrinkRecord", reflect.TypeOf((*MockRepository)(nil).AddDrinkRecord), arg0, arg1)
}

// ArchiveDrinkRecords mocks base method.
func (m *MockRepository) ArchiveDrinkRecords(arg0 context.Context, arg1 *drink_ledger.ArchiveDrinkRecordsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveDrinkRecords", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveDrinkRecords indicates an expected call of ArchiveDrinkRecords.
func (mr *MockRepositoryMockRecorder) ArchiveDrinkRecords(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveDrinkRecords", reflect.TypeOf((*MockRepository)(nil).ArchiveDrinkRecords), arg0, arg1)
}

// CreateDrinkRecord mocks base method.
func (m *MockRepository) CreateDrinkRecord(arg0 context.Context, arg1 *drink_ledger.CreateDrinkRecordInput) (*drink_ledger.CreateDrinkRecordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDrinkRecord", arg0, arg1)
	ret0, _ := ret[0].(*drink_ledger.CreateDrinkRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDrinkRecord indicates an expected call of CreateDrinkRecord.
func (mr *MockRepositoryMockRecorder) CreateDrinkRecord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDrinkRecord", reflect.TypeOf((*MockRepository)(nil).CreateDrinkRecord), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockRepository) CreateSession(arg0 context.Context, arg1 *drink_ledger.CreateSessionInput) (*drink_ledger.CreateSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(*drink_ledger.CreateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockRepositoryMockRecorder) CreateSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockRepository)(nil).CreateSession), arg0, arg1)
}

// DeleteDrinkRecords mocks base method.
func (m *MockRepository) DeleteDrinkRecords(arg0 context.Context, arg1 *drink_ledger.DeleteDrinkRecordsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDrinkRecords", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDrinkRecords indicates an expected call of DeleteDrinkRecords.
func (mr *MockRepositoryMockRecorder) DeleteDrinkRecords(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDrinkRecords", reflect.TypeOf((*MockRepository)(nil).DeleteDrinkRecords), arg0, arg1)
}

// GetCurrentSession mocks base method.
func (m *MockRepository) GetCurrentSession(arg0 context.Context, arg1 *drink_ledger.GetCurrentSessionInput) (*drink_ledger.GetCurrentSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSession", arg0, arg1)
	ret0, _ := ret[0].(*drink_ledger.GetCurrentSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentSession indicates an expected call of GetCurrentSession.
func (mr *MockRepositoryMockRecorder) GetCurrentSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSession", reflect.TypeOf((*MockRepository)(nil).GetCurrentSession), arg0, arg1)
}

// GetDrinkRecordsForGame mocks base method.
func (m *MockRepository) GetDrinkRecordsForGame(arg0 context.Context, arg1 *drink_ledger.GetDrinkRecordsForGameInput) (*drink_ledger.GetDrinkRecordsForGameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrinkRecordsForGame", arg0, arg1)
	ret0, _ := ret[0].(*drink_ledger.GetDrinkRecordsForGameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrinkRecordsForGame indicates an expected call of GetDrinkRecordsForGame.
func (mr *MockRepositoryMockRecorder) GetDrinkRecordsForGame(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrinkRecordsForGame", reflect.TypeOf((*MockRepository)(nil).GetDrinkRecordsForGame), arg0, arg1)
}

// GetDrinkRecordsForPlayer mocks base method.
func (m *MockRepository) GetDrinkRecordsForPlayer(arg0 context.Context, arg1 *drink_ledger.GetDrinkRecordsForPlayerInput) (*drink_ledger.GetDrinkRecordsForPlayerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrinkRecordsForPlayer", arg0, arg1)
	ret0, _ := ret[0].(*drink_ledger.GetDrinkRecordsForPlayerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrinkRecordsForPlayer indicates an expected call of GetDrinkRecordsForPlayer.
func (mr *MockRepositoryMockRecorder) GetDrinkRecordsForPlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrinkRecordsForPlayer", reflect.TypeOf((*MockRepository)(nil).GetDrinkRecordsForPlayer), arg0, arg1)
}

// GetDrinkRecordsForSession mocks base method.
func (m *MockRepository) GetDrinkRecordsForSession(arg0 context.Context, arg1 *drink_ledger.GetDrinkRecordsForSessionInput) (*drink_ledger.GetDrinkRecordsForSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrinkRecordsForSession", arg0, arg1)
	ret0, _ := ret[0].(*drink_ledger.GetDrinkRecordsForSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrinkRecordsForSession indicates an expected call of GetDrinkRecordsForSession.
func (mr *MockRepositoryMockRecorder) GetDrinkRecordsForSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrinkRecordsForSession", reflect.TypeOf((*MockRepository)(nil).GetDrinkRecordsForSession), arg0, arg1)
}

// MarkDrinkPaid mocks base method.
func (m *MockRepository) MarkDrinkPaid(arg0 context.Context, arg1 *drink_ledger.MarkDrinkPaidInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDrinkPaid", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDrinkPaid indicates an expected call of MarkDrinkPaid.
func (mr *MockRepositoryMockRecorder) MarkDrinkPaid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDrinkPaid", reflect.TypeOf((*MockRepository)(nil).MarkDrinkPaid), arg0, arg1)
}
