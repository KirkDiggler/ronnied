// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/ronnied/internal/repositories/drink_ledger (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_repository.go github.com/KirkDiggler/ronnied/internal/repositories/drink_ledger Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	drink_ledger "github.com/KirkDiggler/ronnied/internal/repositories/drink_ledger"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddDrinkRecord mocks base method.
func (m *MockRepository) AddDrinkRecord(ctx context.Context, input *drink_ledger.AddDrinkRecordInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDrinkRecord", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDrinkRecord indicates an expected call of AddDrinkRecord.
func (mr *MockRepositoryMockRecorder) AddDrinkRecord(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDrinkRecord", reflect.TypeOf((*MockRepository)(nil).AddDrinkRecord), ctx, input)
}

// GetDrinkRecordsForGame mocks base method.
func (m *MockRepository) GetDrinkRecordsForGame(ctx context.Context, input *drink_ledger.GetDrinkRecordsForGameInput) (*drink_ledger.GetDrinkRecordsForGameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrinkRecordsForGame", ctx, input)
	ret0, _ := ret[0].(*drink_ledger.GetDrinkRecordsForGameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrinkRecordsForGame indicates an expected call of GetDrinkRecordsForGame.
func (mr *MockRepositoryMockRecorder) GetDrinkRecordsForGame(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrinkRecordsForGame", reflect.TypeOf((*MockRepository)(nil).GetDrinkRecordsForGame), ctx, input)
}

// GetDrinkRecordsForPlayer mocks base method.
func (m *MockRepository) GetDrinkRecordsForPlayer(ctx context.Context, input *drink_ledger.GetDrinkRecordsForPlayerInput) (*drink_ledger.GetDrinkRecordsForPlayerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrinkRecordsForPlayer", ctx, input)
	ret0, _ := ret[0].(*drink_ledger.GetDrinkRecordsForPlayerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrinkRecordsForPlayer indicates an expected call of GetDrinkRecordsForPlayer.
func (mr *MockRepositoryMockRecorder) GetDrinkRecordsForPlayer(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrinkRecordsForPlayer", reflect.TypeOf((*MockRepository)(nil).GetDrinkRecordsForPlayer), ctx, input)
}

// MarkDrinkPaid mocks base method.
func (m *MockRepository) MarkDrinkPaid(ctx context.Context, input *drink_ledger.MarkDrinkPaidInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDrinkPaid", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDrinkPaid indicates an expected call of MarkDrinkPaid.
func (mr *MockRepositoryMockRecorder) MarkDrinkPaid(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDrinkPaid", reflect.TypeOf((*MockRepository)(nil).MarkDrinkPaid), ctx, input)
}
